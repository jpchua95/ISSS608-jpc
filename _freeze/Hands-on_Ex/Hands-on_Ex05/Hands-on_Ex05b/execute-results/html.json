{
  "hash": "c58d08b24cc5b57d2e75c27ecae177e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 05b: Visual Correlation Analysis\"\nauthor: \"Jia Peng Chua\"\ndate-modified: \"last-modified\"\nexecute:\n    echo: true\n    eval: true\n    warning: false\n    freeze: true\n---\n\n\n\n\n\n# 1. Getting Started\n\nCorrelation coefficient is commonly used to measure the type and strength of the relationship between 2 variables.\n\nThe values of a correlation coefficient ranges between -1 and 1.\n\n-   1: shows a perfect linear relationship between 2 variables\n\n-   -1: shows a perfect inverse relationship between 2 variables\n\n-   0: shows no linear relationship between 2 variables\n\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables.\n\nWe will launch `corrplot`, `ggpubr`, `plotly`, `tidyverse` in R.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n\n\n\nThe code chunk below imports the *wine_quality.csv* file into R using the `read_csv()` function of *readr* package.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\n\n\n::: callout-note\nOther than `quality` and `type`, the rest of the variables are numerical and continuous data type.\n:::\n\n# 2 Building Correlation Matrix: *pairs()* method\n\nWe will create scatterplot matrix using the [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) function of R Graphics.\n\n## 2.1 Building a basic correlation matrix\n\nThe code chunk below plots a 11 x 11 scatter plot matrix of the Wine Quality data.\n\n::: panel-tabset\n#### The plot\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex05b_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### The code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n:::\n\n\n\n\n:::\n\nThe required input of `pairs()` can be a matrix or data frame. The code chunk below plots the scatterplot matrix with columns 2 to 12 of the wine dataframe.\n\n::: panel-tabset\n#### The plot\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex05b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### The code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n:::\n\n\n\n\n:::\n\n## 2.2 Drawing the lower corner\n\nSince a correlation matrix is symmetric, it is common to show either the upper or lower half of the matrix.\n\nThe `upper.panel` argument is used to show the lower half of the correlation matrix.\n\n::: panel-tabset\n#### The plot\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex05b_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### The code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n:::\n\n\n\n\n:::\n\nSimilarly, the `lower.panel` argument is used to show the upper half of the correlation matrix.\n\n::: panel-tabset\n#### The plot\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex05b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### The code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n:::\n\n\n\n\n:::\n\n## 2.3 Including with correlation coefficients\n\n[`panel.cor`](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function can be used to show the correlation coefficient of each pair of variables instead of a scatter plot. This will also show higher correlations in a larger font.\n\n::: panel-tabset\n#### The plot\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex05b_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### The code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n:::\n\n\n\n\n:::\n\n# 3. Visualising Correlation Matrix: *ggcormat()*\n\nScatter plots might appear very cluttered when the number of observations is relatively large (i.e. more than 500). Corrgram data visualisation technique can be used to overcome this problem.\n\nThe are at least three R packages provide function to plot *corrgram*:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\nThe code chunk below visualises correlation matrix using `ggcorrmat()`.\n\n::: panel-tabset\n#### The plot\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex05b_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### The code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n:::\n\n\n\n\n:::\n\nThe code chunk below adds title, subtitle and aesthetic elements to the plot.\n\n::: panel-tabset\n#### The plot\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex05b_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### The code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n:::\n\n\n\n\n:::\n\n::: callout-note\n-   `cor.vars` argument is used to compute the correlation matrix needed to build the *corrgram*.\n\n-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2) function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n:::\n\nThe following sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n\n\n\n# 4. Building Multiple Plots\n",
    "supporting": [
      "Hands-on_Ex05b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}