{
  "hash": "5897f9c65cbee801390932d62a3d91f7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 04a: Visualising Distribution\"\nauthor: \"Jia Peng Chua\"\ndate-modified: \"last-modified\"\nexecute:\n    echo: true\n    eval: true\n    warning: false\n    freeze: true\n---\n\n\n\n# 1. Getting Started\n\n## 1.1 Installing and loading the packages\n\nThe following R packages will be used:\n\n-   `ggridges`: a ggplot2 extension specially designed for plotting ridgeline plots\n\n-   `ggdist`: a ggplot2 extension spacially desgin for visualising distribution and uncertainty\n\n-   `tidyverse`: a family of R packages to meet the modern data science and visual communication needs\n\n-   `ggthemes`: a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package\n\n-   `colorspace`: an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n```\n:::\n\n\n\n## 1.2 Data Import\n\nThe code chunk below imports the *Exam_data.csv* file into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n# 2. Visualising Distribution with Ridgeline Plot\n\n[*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n::: callout-note\n-   Ridgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\n\n-   It works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n:::\n\n## 2.1 Plotting ridgeline graph: *ggridges* method\n\nggridges package provides two main geom to plot gridgeline plots, they are:\n\n-   `geom_ridgeline()`: takes height values directly to draw the ridgelines\n\n-   `geom_density_ridges()`: first estimates data densities and then draws those using ridgelines\n\nThe code chunk below plots using `geom_density_ridges()`.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 2.2 Varying fill colors along the x axis\n\nThis can be achieved by using either\n\n-   [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html)\n\n-   [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html)\n\nBoth geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 2.3 Mapping the probabilities directly onto colour\n\nggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html)that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nThe code chunk below maps the probabilities calculated using `stat(ecdf)`, which represents the empirical cumulative density function for the distribution.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n::: callout-important\nIt is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.\n:::\n\n## 2.4 Ridgeline plots with quantile lines\n\nBy using [`geom_density_ridges_gradient()`](#0), we can colour the ridgeline plot by quantile, using the calculated `stat(quantile)` aesthetic.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n\n:::\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n# 3. Visualising Distribution with Raincloud Plot\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\n## 3.1 Plotting a Half Eye Graph\n\nWe will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of ggdist package.\n\n:::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n\n\n::: callout-note\nThe slab interval is removed by setting `.width = 0` and `point_colour = NA`.\n:::\n::::\n\n## 3.2 Adding the boxplot with *geom_boxplot()*\n\nAdding the second geometry layer using `geom_boxplot()` produces a narrow boxplot.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n\n:::\n\n## 3.3 Adding Dot Plots with *stat_dots()*\n\nAdding the third geometry layer using `stat_dots()` of the ggdist package. This produces a half-dotplot, which is similar to a histogram which indicates the number of samples. Selecting `side = \"left\"` indicates the dotplot to be on the left side.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n\n:::\n\n## 3.4 Finishing touch\n\nThe [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance.\n\nThe `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n#### The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n\n:::\n\n[^1]\n\n[^1]: This document was completed with reference to:\n\n    -   Prof Kam's notes \"9 Visualising Distribution\": <https://r4va.netlify.app/chap09>\n",
    "supporting": [
      "Hands-on_Ex04a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}