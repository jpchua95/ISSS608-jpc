{
  "hash": "1f1778e3eb8eb4a95ba6fcec7e7b8c6b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 04b: Visual Statistical Analysis\"\nauthor: \"Jia Peng Chua\"\ndate-modified: \"last-modified\"\nexecute:\n    echo: true\n    eval: true\n    warning: false\n    freeze: true\n---\n\n\n\n# 1. Getting Started\n\nOver here, [`ggstatsplot`](https://indrajeetpatil.github.io/ggstatsplot/index.html) (an extension of ggplot2) and `tidyverse` packages will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n\n\nThe code chunk below imports the *Exam_data.csv* file into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n# 2. Building Visuals\n\n## 2.1 One-sample test: *gghistostates()* method\n\nIn the code chunk below, [`gghistostats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html)is used to to build an visual of one-sample test on English scores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## 2.2 Unpacking the Bayes Factor\n\n-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\n-   That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\n\n-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\n\n-   The [Schwarz criterion](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n-   A Bayes Factor can be any positive number. \n\n-   One of the most common interpretations is as follow:\n\n![](image6.jpg)\n\n## 2.3 Two-sample mean test: *ggbetweenstats()*\n\nIn the code chunk below, [`ggbetweenstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html)is used to build a visual for two-sample mean test of Maths scores by gender.\n\nDefault information includes:\n\n-   Statistical details\n\n-   Bayes Factor\n\n-   Sample sizes\n\n-   Distribution summary\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## 2.4 Oneway ANOVA Test: *ggbetweenstats()* method\n\nIn the code chunk below, [`ggbetweenstats()`](#0)is used to build a visual for One-way ANOVA test on English score by race.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nFor the argument `pairwise.display`, here are the values we can use:\n\n-   “ns”: only non-significant\n\n-   “s”: only significant\n\n-   “all”: everything\n\nHere is an example showing all (significant and non-significant) pairwise display.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"all\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## 2.5 Significant Test of Correlation: *ggscatterstats()*\n\nIn the code chunk below, [`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html)is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## 2.6 Significant Test of Association (Depedence): *ggbarstats()* methods\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable using [`cut()`](#0)*.* `ggbarstats()` is then used to build a visual for Significant Test of Association.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,20,40,60,80,100))\n)\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nBy using bins of 0, 20, 40, 60, 80, 100, the results in some bins are too small and insignificant.\n\nRe-binning to 0, 60, 75, 85, 100 provides a clearer categorisation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n# 3. Visualising Models\n\nIn this section, the `readxl`, `performance`, `parameters` and `see` packages will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n:::\n\n\n\nIn the code chunk below, [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of [*readxl*](#0)package is used to import the data worksheet of *ToyotaCorolla.xls* workbook into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## 3.1 Multiple Regression Model using *lm()*\n\nThe code chunk below is used to calibrate a multiple linear regression model by using `lm()`of Base Stats of R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n\n\n:::\n:::\n\n\n\n## 3.2 Model Diagnostic: Checking for mullticolinearity\n\n[`check_collinearity()`](https://easystats.github.io/performance/reference/check_collinearity.html)of [*performance*](https://easystats.github.io/performance/index.html)package is used to check for the model's multicollinearity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_collinearity(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n```\n\n\n:::\n:::\n\n\n\nPlotting out the collinearity results. Variance inflation factor (VIF) is a statistical measurement that quantifies multicollinearity in a regression model. A low VIF indicates low or no correlation between the variables. A high VIF (\\>10) indicates a strong multicollinearity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_c <- check_collinearity(model)\nplot(check_c)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## 3.3 Model Diagnostic: Checking normality assumption\n\n[`check_normality()`](https://easystats.github.io/performance/reference/check_normality.html)of *performance* package is used to check normality assumptions of the model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_norm <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_norm <- check_normality(model_norm)\nplot(check_norm)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## 3.4 Model Diagnostic: Checking for homogeneity of variances\n\n[`check_heteroscedasticity()`](https://easystats.github.io/performance/reference/check_heteroscedasticity.html)of *performance* package is used to checking the homogeneity of variances of models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_h <- check_heteroscedasticity(model_norm)\nplot(check_h)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## 3.5 Model Diagnostic: Complete check\n\nPerform the complete check by using [`check_model()`](https://easystats.github.io/performance/reference/check_model.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model_norm)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## 3.6 Visualising Regression Parameters: *see* methods\n\n`plot()` of *see* package and `parameters()` of *parameters* package are used to visualise the parameters of a regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(parameters(model_norm))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## 3.7 Visualising Regression Parameters: *ggcoefstats()* methods\n\n[`ggcoefstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of *ggstatsplot* package is used to visualise the parameters of a regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoefstats(model_norm, \n            output = \"plot\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n[^1]\n\n[^1]: This document was completed with reference to:\n\n    -   Prof Kam's notes \"10 Visual Statistical Analysis\": [https://r4va.netlify.app/chap10](#0)\n",
    "supporting": [
      "Hands-on_Ex04b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}