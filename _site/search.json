[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Jia Peng Tiny World",
    "section": "",
    "text": "Welcome JP’s Visual Analytics World!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m JP, hi nice to meet you."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "",
    "text": "Loading tidyverse into R environment by using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "",
    "text": "Loading tidyverse into R environment by using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "Importing data",
    "text": "Importing data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into R environment as a tibble data.frame.\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n\npopdata_long &lt;- popdata_fat %&gt;%\n    pivot_longer(c(3:21),\n                 names_to = \"Age Group\",\n                 values_to = \"Population\")\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n    select(`Project Name`,\n           `Transacted Price ($)`,\n           `Type of Sale`,\n           `Unit Price ($ psm)`,\n           `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nWorking with filter() of dplyr\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n    filter(`Property Type` == \"Condominium\" |\n               `Property Type` == \"Apartment\") %&gt;%\n    filter(`Type of Sale` == \"New Sale\") %&gt;%\n    filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\n\nPutting all together\n\nrealis2019_end &lt;- realis2019 %&gt;%\n    select(`Project Name`,\n           `Transacted Price ($)`,\n           `Type of Sale`,\n           `Unit Price ($ psm)`,\n           `Property Type`) %&gt;%\n    filter(`Property Type` == \"Condominium\" |\n               `Property Type` == \"Apartment\") %&gt;%\n    filter(`Type of Sale` == \"New Sale\") %&gt;%\n    filter(`Unit Price ($ psm)` &lt;= 13000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "",
    "text": "In this exercise, we will read and learn the basic principles and essential components of ggplot2.\nFirst, we load tidyverse into R environment using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "",
    "text": "In this exercise, we will read and learn the basic principles and essential components of ggplot2.\nFirst, we load tidyverse into R environment using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "2. Importing Data",
    "text": "2. Importing Data\nThe code chunk below uses read_csv() of readr to import the Exam_data dataset into R environment.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#compare-r-graphics-with-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#compare-r-graphics-with-ggplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "4. Compare R Graphics with ggplot",
    "text": "4. Compare R Graphics with ggplot\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs we can see, both plots are relatively similar and the codes for R Graphics is more straightforward. However, we can customise our plots with ggplot2, which will be more helpful when creating complex, visually appealing and more insightful graphs for visualisation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "6. Essential Grammatical Elements in ggplot2",
    "text": "6. Essential Grammatical Elements in ggplot2\nWhen calling ggplot with just the data argument, a blank canvas would return as it initialises the ggplot object. This specifies the dataset to be used for the plot.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nBy including the aes argument, we include the x-axis and the axis’ label.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\nNext, we look at adding geometric objects to the graph. We can create layers using a geom_ function.\n\n\n\n\n\n\nNote\n\n\n\nThe full list can be found here.\n\n\n\n6.1 Geometric Objects: geom_bar()\nThe code chunk below plots a bar chart using geom_bar().\n\nggplot(data=exam_data, aes(x= RACE)) + \n    geom_bar()\n\n\n\n\n\n\n\n\n\n\n6.2 Geometric Objects: geom_dotplot()\nThe code chunk below plots a dot plot using geom_dotplot().\n\nggplot(data=exam_data, aes(x= MATHS)) + \n    geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\nThe code chunk below turns off the y-axis with scale_y_continuous and changes the binwidth to 2.5.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n6.3 Geometric Objects: geom_histogram()\nThe code chunk below plots a histogram using geom_histogram().\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n6.4 Modifying a geometric object by changing geom()\nNext, we explore the various elements by changing the arguments in geom:\n\nbins: change the number of bins\nfill: shade the histogram\ncolor: changes the outline color of the bars\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n6.5 Modifying a geometric object by changing aes()\nNext, we explore the various elements by changing the arguments in aes:\n\nfill: changes the interior colour of the histogram\n\nHere, we need to specify the sub-group\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n6.6 Geometric Objects: geom_density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code chunk below plots the distribution of MATHS scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()  \n\n\n\n\n\n\n\n\nBy adding the colour or fill argument to aes(), we plot 2 kernel density lines, which shows the distribution by GENDER.\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n6.7 Geometric Objects: geom_boxplot()\ngeom_boxplot() displays continuous value list on the plot. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()    \n\n\n\n\n\n\n\n\nWithin geom_boxplot(), the notch argument helps visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\n\n\n\n\n\nNote\n\n\n\nRead more about notches here.\n\n\nThe code chunk below plots the distribution of MATHS scores by GENDER in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n6.8 Geometric Objects: geom_violin()\ngeom_violin creates violin plot, which compares multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code chunk below plots the distribution of MATHS score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n6.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the MATHS and ENGLISH grades of pupils using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\n\n\n6.10 Combining geom Objects\nThe geom objects can be combined to form meaning plots and retrieve meaningful insights.\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#understanding-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#understanding-ggplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "3. Understanding ggplot",
    "text": "3. Understanding ggplot\nggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics.\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\n\n\n\n\nNote\n\n\n\nClick here to learn more about ggplot2."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-grammar-of-graphics",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "5. The Grammar of Graphics",
    "text": "5. The Grammar of Graphics\nThe Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers.\nFrom Prof Kam’s notes, ggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. It defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\nThe figure below shows the seven grammars of ggplot2: \nA short description of each building block is as follow:\n\nData: The dataset being plotted\nAesthetics: Take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency\nGeometrics: The visual elements used for our data, such as point, bar or line\nFacets: Split the data into subsets to create multiple variations of the same graph (paneling, multiple plots)\nStatistics: Statiscal transformations that summarise data (e.g. mean, confidence intervals)\nCoordinate systems: Define the plane on which data are mapped on the graphic\nThemes: Modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7. Essential Grammatical Elements in ggplot2: stat",
    "text": "7. Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n7.1 Working with stat()\nThe code chunk below plots 2 boxplots. However, the plots are incomplete as they do not show the positions of the means, making it difficult to derive a reliable and accurate statistical interpretation.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n7.2 The stat_summary() method\nThe code chunk below adds mean values by using the stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)    \n\n\n\n\n\n\n\n\n\n\n7.3 The geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)       \n\n\n\n\n\n\n\n\n\n\n7.4 Best fit curve on a scatterplot\nThe code chunk below plots a scatterplot, showing the relationship of Maths and English grades of pupils. However, it is hard to interpet the graph.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\ngeom_smooth() can be used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\nThe default smoothing method can be overridden with the method argument.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8. Essential Grammatical Elements in ggplot2: Facets",
    "text": "8. Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n8.1 Working with facet_wrap()\nThe code chunk below plots a trellis plot using facet_wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n8.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n    geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9. Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "9. Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\ncoord_flip(): a cartesian system with the x and y flipped\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot)\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps\n\n\n9.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form:\n\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n9.2 Changing the y- and x-axis range\nThe following scatterplot is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100, by adding the arguments xlim and ylim to coord_cartesian.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10. Essential Grammatical Elements in ggplot2: themes",
    "text": "10. Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include:\n\ntheme_gray() (default)\ntheme_bw()\ntheme_classic()\n\n\n\n\n\n\n\nNote\n\n\n\nThe list of themes can be found here.\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#additional-elements",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#additional-elements",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "11. Additional Elements",
    "text": "11. Additional Elements\n\n11.1 Geometric Objects: geom_jitter\nIn 6.10 Combining geom Objects, The jitter geom adds a small amount of random variation to the location of each point. Altertively, geom_jitter() can also be used.\nIt is useful in preventing overplotting, which occurs when many points overlap and prevent use from observing the true distribution of the data, especially in smaller datasets.\n\n\n\n\n\n\nNote\n\n\n\nClick here to read more about jitter points.\n\n\nThe code chunk below displays the same plots with a different function.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_jitter(size = 0.5)\n\n\n\n\n\n\n\n\n\n\n11.2 Working with facets with modified aes()\nThe code chunk below added the breakdown by GENDER by colour in each panel. This provides a clear representation of the performance by GENDER in each CLASS.\n\nggplot(data=exam_data, \n       aes(x= MATHS, fill = GENDER)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n11.3 Combining facets with geom_violin()\nThe code chunk below added facet_wrap() to the violin plot, which allows us to compare the distributions of MATHS of each class by GENDER.\n\nggplot(data=exam_data, \n       aes(x= GENDER, y = MATHS)) +\n    geom_violin()+\n    stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=1)   +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#footnotes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#footnotes",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis document was completed with reference to:\n\nProf Kam’s notes 1 A Layered Grammar of Graphics: ggplot2 methods\nggplot2 documentation\nSome paraphrasing from ChatGPT\n\n↩︎"
  }
]