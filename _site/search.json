[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome Jia Peng’s Tiny Visual Analytics World!",
    "section": "",
    "text": "Credits: ChatGPT"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Jia Peng",
    "section": "",
    "text": "Hello, I’m Jia Peng or you can call me JP. Nice to meet you!\n\n\n\n\n\nThis is me!\n\n\n\n\nI’m a Professional Services Consultant at an AI chatbot company, where I help customers implement chatbots and onboard their teams effectively.\nI have a strong interest in data analytics and AI project management. Currently, I’m in my final semester of the SMU MITB program.\nFeel free to connect with me on LinkedIn!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "",
    "text": "Loading tidyverse into R environment by using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "",
    "text": "Loading tidyverse into R environment by using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "Importing data",
    "text": "Importing data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into R environment as a tibble data.frame.\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n\npopdata_long &lt;- popdata_fat %&gt;%\n    pivot_longer(c(3:21),\n                 names_to = \"Age Group\",\n                 values_to = \"Population\")\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-On Exercise 00: Working with Tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n    select(`Project Name`,\n           `Transacted Price ($)`,\n           `Type of Sale`,\n           `Unit Price ($ psm)`,\n           `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nWorking with filter() of dplyr\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n    filter(`Property Type` == \"Condominium\" |\n               `Property Type` == \"Apartment\") %&gt;%\n    filter(`Type of Sale` == \"New Sale\") %&gt;%\n    filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\n\nPutting all together\n\nrealis2019_end &lt;- realis2019 %&gt;%\n    select(`Project Name`,\n           `Transacted Price ($)`,\n           `Type of Sale`,\n           `Unit Price ($ psm)`,\n           `Property Type`) %&gt;%\n    filter(`Property Type` == \"Condominium\" |\n               `Property Type` == \"Apartment\") %&gt;%\n    filter(`Type of Sale` == \"New Sale\") %&gt;%\n    filter(`Unit Price ($ psm)` &lt;= 13000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "",
    "text": "In this exercise, we will read and learn the basic principles and essential components of ggplot2.\nFirst, we load tidyverse into R environment using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "",
    "text": "In this exercise, we will read and learn the basic principles and essential components of ggplot2.\nFirst, we load tidyverse into R environment using the code chunk below.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "2. Importing Data",
    "text": "2. Importing Data\nThe code chunk below uses read_csv() of readr to import the Exam_data dataset into R environment.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#compare-r-graphics-with-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#compare-r-graphics-with-ggplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "4. Compare R Graphics with ggplot",
    "text": "4. Compare R Graphics with ggplot\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs we can see, both plots are relatively similar and the codes for R Graphics is more straightforward. However, we can customise our plots with ggplot2, which will be more helpful when creating complex, visually appealing and more insightful graphs for visualisation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "6. Essential Grammatical Elements in ggplot2",
    "text": "6. Essential Grammatical Elements in ggplot2\nWhen calling ggplot with just the data argument, a blank canvas would return as it initialises the ggplot object. This specifies the dataset to be used for the plot.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nBy including the aes argument, we include the x-axis and the axis’ label.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\nNext, we look at adding geometric objects to the graph. We can create layers using a geom_ function.\n\n\n\n\n\n\nNote\n\n\n\nThe full list can be found here.\n\n\n\n6.1 Geometric Objects: geom_bar()\nThe code chunk below plots a bar chart using geom_bar().\n\nggplot(data=exam_data, aes(x= RACE)) + \n    geom_bar()\n\n\n\n\n\n\n\n\n\n\n6.2 Geometric Objects: geom_dotplot()\nThe code chunk below plots a dot plot using geom_dotplot().\n\nggplot(data=exam_data, aes(x= MATHS)) + \n    geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\nThe code chunk below turns off the y-axis with scale_y_continuous and changes the binwidth to 2.5.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n6.3 Geometric Objects: geom_histogram()\nThe code chunk below plots a histogram using geom_histogram().\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n6.4 Modifying a geometric object by changing geom()\nNext, we explore the various elements by changing the arguments in geom:\n\nbins: change the number of bins\nfill: shade the histogram\ncolor: changes the outline color of the bars\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n6.5 Modifying a geometric object by changing aes()\nNext, we explore the various elements by changing the arguments in aes:\n\nfill: changes the interior colour of the histogram\n\nHere, we need to specify the sub-group\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n6.6 Geometric Objects: geom_density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code chunk below plots the distribution of MATHS scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()  \n\n\n\n\n\n\n\n\nBy adding the colour or fill argument to aes(), we plot 2 kernel density lines, which shows the distribution by GENDER.\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n6.7 Geometric Objects: geom_boxplot()\ngeom_boxplot() displays continuous value list on the plot. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()    \n\n\n\n\n\n\n\n\nWithin geom_boxplot(), the notch argument helps visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\n\n\n\n\n\nNote\n\n\n\nRead more about notches here.\n\n\nThe code chunk below plots the distribution of MATHS scores by GENDER in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n6.8 Geometric Objects: geom_violin()\ngeom_violin creates violin plot, which compares multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code chunk below plots the distribution of MATHS score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n6.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the MATHS and ENGLISH grades of pupils using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\n\n\n6.10 Combining geom Objects\nThe geom objects can be combined to form meaning plots and retrieve meaningful insights.\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#understanding-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#understanding-ggplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "3. Understanding ggplot",
    "text": "3. Understanding ggplot\nggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics.\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\n\n\n\n\nNote\n\n\n\nClick here to learn more about ggplot2."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-grammar-of-graphics",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "5. The Grammar of Graphics",
    "text": "5. The Grammar of Graphics\nThe Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers.\nFrom Prof Kam’s notes, ggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. It defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\nThe figure below shows the seven grammars of ggplot2: \nA short description of each building block is as follow:\n\nData: The dataset being plotted\nAesthetics: Take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency\nGeometrics: The visual elements used for our data, such as point, bar or line\nFacets: Split the data into subsets to create multiple variations of the same graph (paneling, multiple plots)\nStatistics: Statiscal transformations that summarise data (e.g. mean, confidence intervals)\nCoordinate systems: Define the plane on which data are mapped on the graphic\nThemes: Modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7. Essential Grammatical Elements in ggplot2: stat",
    "text": "7. Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n7.1 Working with stat()\nThe code chunk below plots 2 boxplots. However, the plots are incomplete as they do not show the positions of the means, making it difficult to derive a reliable and accurate statistical interpretation.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n7.2 The stat_summary() method\nThe code chunk below adds mean values by using the stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)    \n\n\n\n\n\n\n\n\n\n\n7.3 The geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)       \n\n\n\n\n\n\n\n\n\n\n7.4 Best fit curve on a scatterplot\nThe code chunk below plots a scatterplot, showing the relationship of Maths and English grades of pupils. However, it is hard to interpet the graph.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\ngeom_smooth() can be used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\nThe default smoothing method can be overridden with the method argument.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8. Essential Grammatical Elements in ggplot2: Facets",
    "text": "8. Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n8.1 Working with facet_wrap()\nThe code chunk below plots a trellis plot using facet_wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n8.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n    geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9. Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "9. Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\ncoord_flip(): a cartesian system with the x and y flipped\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot)\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps\n\n\n9.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form:\n\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n9.2 Changing the y- and x-axis range\nThe following scatterplot is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100, by adding the arguments xlim and ylim to coord_cartesian.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10. Essential Grammatical Elements in ggplot2: themes",
    "text": "10. Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include:\n\ntheme_gray() (default)\ntheme_bw()\ntheme_classic()\n\n\n\n\n\n\n\nNote\n\n\n\nThe list of themes can be found here.\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#additional-elements",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#additional-elements",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "11. Additional Elements",
    "text": "11. Additional Elements\n\n11.1 Geometric Objects: geom_jitter\nIn 6.10 Combining geom Objects, the jitter geom adds a small amount of random variation to the location of each point. Alternatively, geom_jitter() can also be used.\nIt is useful in preventing overplotting, which occurs when many points overlap and preventing us from observing the true distribution of the data, especially in smaller datasets.\n\n\n\n\n\n\nNote\n\n\n\nClick here to read more about jitter points.\n\n\nThe code chunk below displays the same plots with a different function.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_jitter(size = 0.5)\n\n\n\n\n\n\n\n\n\n\n11.2 Working with facets with modified aes()\nThe code chunk below added the breakdown by GENDER in each panel. This provides a clear representation of the results by GENDER in each CLASS.\n\nggplot(data=exam_data, \n       aes(x= MATHS, fill = GENDER)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n11.3 Combining facets with geom_violin()\nThe code chunk below added facet_wrap() to the violin plot, which allows us to compare the distributions of MATHS of each class by GENDER.\n\nggplot(data=exam_data, \n       aes(x= GENDER, y = MATHS)) +\n    geom_violin()+\n    stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=1)   +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#footnotes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#footnotes",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis document was completed with reference to:\n\nProf Kam’s notes 1 A Layered Grammar of Graphics: ggplot2 methods\nggplot2 documentation\nSome paraphrasing from ChatGPT\n\n↩︎"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-Class Exercise 01: Superstore Sales and Profit Report",
    "section": "",
    "text": "For In-Class Exercise 1, we built a dashboard presenting the sales and profit report of Superstore.\nClick here to access the dashboard on Tableau."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-On Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this exercise, learn about more exciting and useful functions of ggplot2.\nTo get started, we load the necessary packages into R environment using the code chunk below.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-On Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this exercise, learn about more exciting and useful functions of ggplot2.\nTo get started, we load the necessary packages into R environment using the code chunk below.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-On Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "2. Importing Data",
    "text": "2. Importing Data\nThe code chunk below uses read_csv() of readr to import the Exam_data dataset into R environment.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-On Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "3. Beyond ggplot2 Annotation: ggrepel",
    "text": "3. Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n3.1 ggrepel came to the rescue\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples above.\n\n\n\n\n\n\nNote\n\n\n\nRead more about ggrepel [here](https://ggrepel.slowkow.com/).\n\n\nThis can be done by simply replacing:\n\ngeom_text() by geom_text_repel()\ngeom_label() by geom_label_repel()\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-On Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "4.Beyond ggplot2 Themes",
    "text": "4.Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are:\n\ntheme_gray()\ntheme_bw()\ntheme_classic()\ntheme_dark()\ntheme_light()\ntheme_linedraw()\ntheme_minimal()\ntheme_void()\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRead more about built-in themes here. Read more about ggplot2 themes here.\n\n\n\n4.1 ggtheme Package\nIn the following code chunk, The Economist theme is used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n4.2 hrbthemes Package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-On Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "5. Beyond Single Graph",
    "text": "5. Beyond Single Graph\nThere are several ggplot2 extensions provide functions to compose figure with multiple graphs. First, we create three statistical graphics with the code chunk below.\nMaths:\n\nThe PlotThe Code\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\nEnglish:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nA scatterplot for English vs Maths score:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as:\n\ngrid.arrange() of gridExtra package. Read more about it here.\nplot_grid() of cowplot package. Read more about it here.\n\nPatchwork which is specially designed for combining separate ggplot2 graphs into a single figure:\n\nTwo-Column Layout using the Plus Sign +\nParenthesis () to create a subplot group\nTwo-Row Layout using the Division Sign /\n\nRead more about patchwork here.\n\n\n5.2 Combining two ggplot2 graphs\nComposite of 2 histograms using patchwork.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n5.3: Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators:\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n5.5 Creating figure with insert\nWith the inset_element(), we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#footnotes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#footnotes",
    "title": "Hands-On Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis document was completed with reference to:\n\nProf Kam’s notes [2 Beyond ggplot2 Fundamentals](https://r4va.netlify.app/chap02)\n\n↩︎"
  }
]