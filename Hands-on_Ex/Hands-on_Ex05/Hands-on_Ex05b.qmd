---
title: "Hands-On Exercise 05b: Visual Correlation Analysis"
author: "Jia Peng Chua"
date-modified: "last-modified"
execute:
    echo: true
    eval: true
    warning: false
    freeze: true
---

# 1. Getting Started

Correlation coefficient is commonly used to measure the type and strength of the relationship between 2 variables.

The values of a correlation coefficient ranges between -1 and 1.

-   1: shows a perfect linear relationship between 2 variables

-   -1: shows a perfect inverse relationship between 2 variables

-   0: shows no linear relationship between 2 variables

When multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.

When the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables.

We will launch `corrplot`, `ggpubr`, `plotly`, `tidyverse` in R.

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

The code chunk below imports the *wine_quality.csv* file into R using the `read_csv()` function of *readr* package.

```{r}
wine <- read_csv("data/wine_quality.csv")
```

::: callout-note
Other than `quality` and `type`, the rest of the variables are numerical and continuous data type.
:::

# 2 Building Correlation Matrix: *pairs()* method

We will create scatterplot matrix using the [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) function of R Graphics.

## 2.1 Building a basic correlation matrix

The code chunk below plots a 11 x 11 scatter plot matrix of the Wine Quality data.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
pairs(wine[,1:11])
```

#### The code

```{r}
#| eval: FALSE
pairs(wine[,1:11])
```
:::

The required input of `pairs()` can be a matrix or data frame. The code chunk below plots the scatterplot matrix with columns 2 to 12 of the wine dataframe.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
pairs(wine[,2:12])
```

#### The code

```{r}
#| eval: FALSE
pairs(wine[,2:12])
```
:::

## 2.2 Drawing the lower corner

Since a correlation matrix is symmetric, it is common to show either the upper or lower half of the matrix.

The `upper.panel` argument is used to show the lower half of the correlation matrix.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
pairs(wine[,2:12], upper.panel = NULL)
```

#### The code

```{r}
#| eval: FALSE
pairs(wine[,2:12], upper.panel = NULL)
```
:::

Similarly, the `lower.panel` argument is used to show the upper half of the correlation matrix.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
pairs(wine[,2:12], lower.panel = NULL)
```

#### The code

```{r}
#| eval: FALSE
pairs(wine[,2:12], lower.panel = NULL)
```
:::

## 2.3 Including with correlation coefficients

[`panel.cor`](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function can be used to show the correlation coefficient of each pair of variables instead of a scatter plot. This will also show higher correlations in a larger font.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

#### The code

```{r}
#| eval: FALSE
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```
:::

# 3. Visualising Correlation Matrix: *ggcormat()*

Scatter plots might appear very cluttered when the number of observations is relatively large (i.e. more than 500). Corrgram data visualisation technique can be used to overcome this problem.

The are at least three R packages provide function to plot *corrgram*:

-   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)

-   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)

-   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)

The code chunk below visualises correlation matrix using `ggcorrmat()`.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

#### The code

```{r}
#| eval: FALSE
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```
:::

The code chunk below adds title, subtitle and aesthetic elements to the plot.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```

#### The code

```{r}
#| eval: FALSE
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```
:::

::: callout-note
-   `cor.vars` argument is used to compute the correlation matrix needed to build the *corrgram*.

-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2) function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.
:::

The following sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.

```{r}
ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
```

# 4. Building Multiple Plots

*ggstasplot* also supports faceting. However the feature is not available in `ggcorrmat()` but in the [`grouped_ggcorrmat()`](#0) of *ggstatsplot*.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

#### The code

```{r}
#| eval: FALSE
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)

```
:::

```         
```

-   To build a facet plot, the only argument needed is `grouping.var`

-   Behind `group_ggcorrmat()`, *patchwork* package is used to create the multiplot. The `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier

-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package

# 5. Visualising Correlation Matrix using *corrplot* Package

This link, [An Introduction to corrplot Package](#0), provides a basic understanding of *corrplot* package.

## 5.1 Getting started with *corrplot*

`cor()` of R Stats is used to compute the correlation matrix of wine data frame.

```{r}
wine.cor <- cor(wine[, 1:11])
```

Plot the *corrgram* using [`corrplot()`](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot)and the default setting.

```{r}
corrplot(wine.cor)
```

::: callout-note
Default settings:

-   Visual object: circle

-   Layout: symmetric matrix

-   Colour scheme: diverging red-blue

    -   Blue: pair variables with positive correlation coefficients

    -   Red: pair variables with negative correlation coefficient

    -   Darker colours: indicated relatively stronger linear relationship

    -   Light colours: indicates relatively weaker linear relationship
:::

## 5.2 Working with visual geometrics

There are 7 visual geometrics (parameter method) that can be used to encode the attribute values:

-   `circle` (default)

-   `square`

-   `ellipse`

-   `number`

-   `shade`

-   `color`

-   `pie`

The code chunk below changes the `method`.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
corrplot(wine.cor, 
         method = "ellipse")
```

#### The code

```{r}
#| eval: FALSE
corrplot(wine.cor, 
         method = "ellipse")
```
:::

## 5.3 Working with layout

*corrplot* supports3 layout types:

-   `full`: displays full matrix

-   `upper`: displays lower matrix

-   `lower`: displays upper matrix

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

#### The code

```{r}
#| eval: FALSE
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```
:::

The arguments `diag` and `tl.col` can be used to turn off the diagonal cells and change the colour of the axis text label.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```

#### The code

```{r}
#| eval: FALSE
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```
:::

## 5.4 Working with mixed layout

[`corrplot.mixed()`](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style can be used to create coorgram with mixed layout.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

#### The code

```{r}
#| eval: FALSE
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```
:::

## 5.5 Combining corrgram with the significant test

`cor.mtest()` can be used to compute p-vales and confidence interval fro each pair of variables.

```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)
```

`p.mat` argument helps to filter out correlation coefficients that are not statistically significant.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

#### The code

```{r}
#| eval: FALSE
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```
:::

## 5.6 Reorder a corrgram

`order` argument helps to overwrite the default sorting setting. Other values include:

-   “AOE”: angular order of the eigenvectors

-   “FPC”: first principal component order

-   “hclust”: hierarchical clustering order

-   “hclust.method”: agglomeration method to be used

    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”

-   “alphabet”: alphabetical order

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

#### The code

```{r}
#| eval: FALSE
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```
:::

## 5.7 **Reordering a correlation matrix using hclust**

Rectangles can be drawn based on the results of hierarchical clustering, using `order = "hclust"`.

::: panel-tabset
#### The plot

```{r}
#| echo: FALSE
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

#### The code

```{r}
#| eval: FALSE
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```
:::

[^1]

[^1]: This document was completed with reference to:

    -   Prof Kam's notes "Visual Correlation Analysis": <https://r4va.netlify.app/chap06>
