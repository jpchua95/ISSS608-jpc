---
title: "Hands-on Ex05e: Treemap Visualisation with R"
author: "Jia Peng Chua"
date-modified: "last-modified"
execute:
    echo: true
    eval: true
    warning: false
    freeze: true
---

# 1. Getting Started

We will load `treemap`, `treemapify` and `tidyverse` into R.

```{r}
pacman::p_load(treemap, treemapify, 
               tidyverse) 
```

The code chunk below imports the *REALIS2018.csv* file into R using the `read_csv()` function of *readr* package.

```{r}
realis2018 <- read_csv("data/realis2018.csv")
```

# 2. Data Wrangling

The originally loaded dataset is not suitable to be used to plot a treemap. We'll perform data manipulation to the dataset.

-   group transaction records by *Project Name*, *Planning Region*, *Planning Area*, *Property Type* and *Type of Sale*

-   compute *Total Unit Sold*, *Total Area*, *Median Unit Price* and *Median Transacted Price* by applying appropriate summary statistics on *No. of Units*, *Area (sqm)*, *Unit Price (\$ psm)* and *Transacted Price (\$)* respectively

`group_by()` and `summarize()` of *dplyr* will be used to perform these steps.

-   grouped `select()` is the same as ungrouped `select()`, except that grouping variables are always retained

-   grouped `arrange()` is the same as ungrouped; unless you set `.by_group = TRUE`, in which case it orders first by the grouping variables

-   `mutate()` and `filter()` are most useful in conjunction with window functions (like `rank()`, or `min(x) == x`)

-   `sample_n()` and `sample_frac()` sample the specified number/fraction of rows in each group

-   `summarise()` computes the summary for each group

## 2.1 Grouped summaries without the Pipe

The code chunk below grouped the dataset.

```{r}
realis2018_grouped <- group_by(realis2018, `Project Name`,
                               `Planning Region`, `Planning Area`, 
                               `Property Type`, `Type of Sale`)
realis2018_summarised <- summarise(realis2018_grouped, 
                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), 
                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

::: callout-note
-   Aggregation functions such as `sum()` and `median()` obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value.

-   The argument `na.rm = TRUE` removes the missing values prior to computation.
:::

## 2.2 Grouped summaries with the Pipe

The code chunk below shows a more efficient way for the same process using pipe, `%>%`.

```{r}
realis2018_summarised <- realis2018 %>% 
  group_by(`Project Name`,`Planning Region`, 
           `Planning Area`, `Property Type`, 
           `Type of Sale`) %>%
  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), 
            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

# 3. Designing Treemap with *treemap* Package

*treemap* package is a R package specially designed to offer great flexibility in drawing treemaps.

## 3.1 Designing a static treemap

`treemap()` of *treemap* package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.

First, we select records belongs to resale condominium property type from the `realis2018_selected` data frame.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

## 3.2 Using the basic arguments

The code chunk below designed a treemap using the arguments *`index`*, *`vSize`* and *`vColor`.*

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: callout-note
About the arguments used:

-   index

    -   The index vector must consist of at least 2 column names or else no hierarchy treemap will be plotted.

    -   If multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.

-   vSize

    -   The column must not contain negative values. This is because its values will be used to map the sizes of the rectangles of the treemaps.
:::

::: callout-warning
The treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.
:::

::: callout-warning
For `treemap()`, `vColor` is used in combination with the argument `type` to determine the colours of the rectangles. Without defining `type`, like the code chunk above, `treemap()` assumes `type = index`, in our case, the hierarchy of planning areas.
:::

## 3.3 Working with *vColor* and *type* arguments

In the code chunk below, we add a `type` argument as "value".

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: callout-note
-   The rectangles are coloured with different intensity of green, reflecting their respective median unit prices.

-   The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.
:::

## 3.4 Colours in treemap package

`mapping` and `palette` arguments can be used to determine the mapping to colour palettes.

The only difference between “value” and “manual” is the default value for mapping.

-   "value" treemap: considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”)

    -   maps `0` corresponds to the middle color (typically white or yellow)

    -   maps `-max(abs(values))` to the left-end color

    -   maps `max(abs(values))` to the right-end color

-   “manual” treemap

    -   maps `min(values)` to the left-end color

    -   maps `max(values)` to the right-end color

    -   maps `mean(range(values))` to the middle color.

## 3.5 The “value” type treemap

The code chunk below shows a `value` type treemap.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: callout-note
-   Although the colour palette used is RdYlBu, there are no red rectangles in the treemap above. This is because all the median unit prices are positive.

-   We only see 5000 to 45000 in the legend because the `range` argument is by default `c(min(values, max(values))` with some pretty rounding.
:::

## 3.6 The “manual” type treemap

In the "manual" type, the value range is mapped linearly to the colour palette.

The code chunk below shows a `manual` type treemap.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: callout-note
The colour scheme used is confusing. This is because mapping = (min(values), mean(range(values)), max(values)).

It is not wise to use diverging colour palette such as *RdYlBu* if the values are all positive or negative.
:::

A single colour palette such as `Blues` can be used to overcome this problem.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## 3.7 Treemap layout

*`treemap()`* supports two popular treemap layouts: `squarified` and `pivotSize`. The default is `pivotSize`.

## 3.8 Working with `algorithm` argument

The code chunk below plots a squarified treemap by changing the `algorithm` argument.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "squarified",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## 3.9 Using `sortID`

When `algorithm = "pivotSize"` is used, `sortID` argument can be used to determine the order in which the rectangles are placed **from top left to bottom right**.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "pivotSize",
        sortID = "Median Transacted Price",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

# 4. Designing Treemap using *treemapify* Package

We will design treemaps using [treemapify](https://cran.r-project.org/web/packages/treemapify/treemapify.pdf) in this section.

## 4.1 Designing a basic treemap

The code chunk below plots a basic treemap with `geom_treemap()`.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") + 
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```

## 4.2 Defining hierarchy

The code chunk below groups dataset by "Planning Region" using the `subgroup` argument.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`),
       start = "topleft") + 
  geom_treemap()
```

The code chunk below adds another subgroup for "Planning Area", using `subgroup2` argument.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap()
```

The code chunk below adds boundary lines to each of the subgroups.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "gray40",
                                size = 2) +
  geom_treemap_subgroup_border(colour = "gray20")
```

# 5. Designing Interactive Treemap using *d3treeR*

We will need the `devtools` package from R.

::: callout-note
You only need to install this package once. Skip the follow code chunk if you have previously installed `devtools` in R.
:::

```{r}
#| eval: FALSE
install.packages("devtools")
```

Load the `devtools` library and install the `d3treeR` package.

```{r}
#| eval: FALSE
library(devtools)
install_github("timelyportfolio/d3treeR")
```

Launch the `d3treeR` package.

```{r}
library(d3treeR)
```

## 5.1 Designing An Interactive Treemap

The code chunk below perform two processes.

`treemap()` is used to build a treemap using the selected variables in condominium data frame. The treemap created is save as object called `tm`.

```{r}
tm <- treemap(realis2018_summarised,
        index=c("Planning Region", "Planning Area"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        title="Private Residential Property Sold, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Then, `d3tree()` is used to build an interactive treemap.

```{r}
d3tree(tm,rootname = "Singapore" )
```
